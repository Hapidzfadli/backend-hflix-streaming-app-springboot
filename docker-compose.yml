version: '3.8'

services:
  # Spring Boot application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hflix-app
    ports:
      - "8080:8080"
    environment:
      # Database connection settings
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/videoplatform?useSSL=false&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
      # MinIO settings
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      # Kafka settings
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      # FFmpeg path settings
      - FFMPEG_BINARY_PATH=/usr/bin/ffmpeg
      - FFMPEG_PROBE_PATH=/usr/bin/ffprobe
      # ELK stack settings
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
      # Profile settings
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./uploads:/app/uploads  # Mount upload directory
      - ./logs:/app/logs        # Mount logs directory
    depends_on:
      - mysql
      - minio
      - kafka
      - elasticsearch
    networks:
      - hflix-network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: hflix-mysql
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=videoplatform
      - MYSQL_USER=hflix
      - MYSQL_PASSWORD=hflix_password
    volumes:
      - mysql_data:/var/lib/mysql  # Persistent database storage
      - ./init-scripts:/docker-entrypoint-initdb.d  # Database initialization scripts
    networks:
      - hflix-network
    restart: unless-stopped
    # Configuration for MySQL
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password

  # MinIO (S3-compatible object storage)
  minio:
    image: minio/minio
    container_name: hflix-minio
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data  # Persistent storage for uploaded files
    networks:
      - hflix-network
    restart: unless-stopped
    command: server --console-address ":9001" /data  # Start MinIO server with console

  # Create required MinIO buckets on startup
  createbuckets:
    image: minio/mc
    container_name: hflix-createbuckets
    depends_on:
      - minio
    networks:
      - hflix-network
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin &&
      /usr/bin/mc mb myminio/videos || true &&
      /usr/bin/mc mb myminio/thumbnails || true &&
      /usr/bin/mc mb myminio/encoded || true &&
      /usr/bin/mc policy set public myminio/videos &&
      exit 0
      "

  # Zookeeper (required by Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: hflix-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - hflix-network
    restart: unless-stopped

  # Kafka message broker
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: hflix-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - hflix-network
    restart: unless-stopped

  # Kafka UI for management and monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: hflix-kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=hflix
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - hflix-network
    restart: unless-stopped

  # Elasticsearch for search and logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    container_name: hflix-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - hflix-network
    restart: unless-stopped
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Logstash for log collection and processing
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.10
    container_name: hflix-logstash
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      - xpack.monitoring.elasticsearch.hosts=http://elasticsearch:9200
    volumes:
      - ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch
    networks:
      - hflix-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    container_name: hflix-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - hflix-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus
    container_name: hflix-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - hflix-network
    restart: unless-stopped

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana
    container_name: hflix-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - hflix-network
    restart: unless-stopped

# Define docker network
networks:
  hflix-network:
    driver: bridge

# Define persistent volumes
volumes:
  mysql_data:
  minio_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data: